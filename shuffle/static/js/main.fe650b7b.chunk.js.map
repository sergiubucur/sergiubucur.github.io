{"version":3,"sources":["common/ArrayUtils.ts","App.tsx","index.tsx"],"names":["shuffleArray","array","i","length","j","Math","floor","random","ColumnCount","CellSize","Steps","App","_cells","_targetArray","_cellContainer","_animationIndex","_update","_resetAnimation","firstTime","cell","position","x","velocity","y","div","style","left","top","requestAnimationFrame","this","_buildTargetArray","_buildCellContainer","_buildCells","_updateCellTargets","setTimeout","push","document","createElement","className","body","appendChild","row","targetPoint","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fe650b7b.chunk.js","sourcesContent":["export function shuffleArray(array: any[]) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\n\nimport \"./App.scss\";\nimport { shuffleArray } from \"./common/ArrayUtils\";\n\nconst ColumnCount = 10;\nconst RowCount = 10;\nconst CellSize = 32;\nconst Steps = 100;\nconst Delay = 1000;\n\ninterface IPoint {\n\tx: number;\n\ty: number;\n}\n\ninterface ICell {\n\tdiv: HTMLDivElement | null;\n\tposition: IPoint;\n\tvelocity: IPoint;\n}\n\nexport default class App extends Component {\n\tprivate readonly _cells: ICell[][] = [];\n\tprivate readonly _targetArray: IPoint[] = [];\n\tprivate _cellContainer: HTMLDivElement | null = null;\n\tprivate _animationIndex = 0;\n\n\tpublic componentDidMount() {\n\t\tthis._buildTargetArray();\n\t\tthis._buildCellContainer();\n\t\tthis._buildCells();\n\n\t\tthis._resetAnimation({ firstTime: true });\n\t}\n\n\tprivate _resetAnimation({ firstTime } : { firstTime: boolean }) {\n\t\tthis._animationIndex = 0;\n\n\t\tif (!firstTime) {\n\t\t\tshuffleArray(this._targetArray);\n\t\t\tthis._updateCellTargets();\n\t\t}\n\n\t\tsetTimeout(this._update, Delay);\n\t}\n\n\tprivate _update = () => {\n\t\tif (this._animationIndex >= Steps) {\n\t\t\tthis._resetAnimation({ firstTime: false });\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < RowCount; i++) {\n\t\t\tfor (let j = 0; j < ColumnCount; j++) {\n\t\t\t\tconst cell = this._cells[i][j];\n\n\t\t\t\tcell.position.x += cell.velocity.x;\n\t\t\t\tcell.position.y += cell.velocity.y;\n\n\t\t\t\tcell.div.style.left = cell.position.x + \"px\";\n\t\t\t\tcell.div.style.top = cell.position.y + \"px\";\n\t\t\t}\n\t\t}\n\n\t\tthis._animationIndex++;\n\n\t\trequestAnimationFrame(this._update);\n\t}\n\n\tprivate _buildTargetArray() {\n\t\tthis._targetArray.length = 0;\n\n\t\tfor (let i = 0; i < RowCount; i++) {\n\t\t\tfor (let j = 0; j < ColumnCount; j++) {\n\t\t\t\tthis._targetArray.push({\n\t\t\t\t\tx: j,\n\t\t\t\t\ty: i,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tshuffleArray(this._targetArray);\n\t}\n\n\tprivate _buildCellContainer() {\n\t\tconst div = document.createElement(\"div\");\n\t\tdiv.className = \"cell-container\";\n\t\tdocument.body.appendChild(div);\n\n\t\tthis._cellContainer = div;\n\t}\n\n\tprivate _buildCells() {\n\t\tthis._cells.length = 0;\n\n\t\tfor (let i = 0; i < RowCount; i++) {\n\t\t\tconst row: ICell[] = [];\n\n\t\t\tfor (let j = 0; j < ColumnCount; j++) {\n\t\t\t\tconst targetPoint = this._targetArray[(i * ColumnCount) + j];\n\n\t\t\t\tconst position = {\n\t\t\t\t\tx: j * CellSize,\n\t\t\t\t\ty: i * CellSize,\n\t\t\t\t};\n\n\t\t\t\tconst velocity = {\n\t\t\t\t\tx: (targetPoint.x - j) * CellSize / Steps,\n\t\t\t\t\ty: (targetPoint.y - i) * CellSize / Steps,\n\t\t\t\t};\n\n\t\t\t\tconst div = document.createElement(\"div\");\n\n\t\t\t\tdiv.className = `cell ${[\"red\", \"green\", \"blue\"][Math.floor(Math.random() * 3)]}`;\n\t\t\t\tdiv.style.left = position.x + \"px\";\n\t\t\t\tdiv.style.top = position.y + \"px\";\n\n\t\t\t\tthis._cellContainer.appendChild(div);\n\n\t\t\t\trow.push({\n\t\t\t\t\tdiv,\n\t\t\t\t\tposition,\n\t\t\t\t\tvelocity,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._cells.push(row);\n\t\t}\n\t}\n\n\tprivate _updateCellTargets() {\n\t\tfor (let i = 0; i < RowCount; i++) {\n\t\t\tfor (let j = 0; j < ColumnCount; j++) {\n\t\t\t\tconst cell = this._cells[i][j];\n\t\t\t\tconst targetPoint = this._targetArray[(i * ColumnCount) + j];\n\n\t\t\t\tcell.velocity = {\n\t\t\t\t\tx: (targetPoint.x * CellSize - cell.position.x) / Steps,\n\t\t\t\t\ty: (targetPoint.y * CellSize - cell.position.y) / Steps,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<></>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}